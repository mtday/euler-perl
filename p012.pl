
#
# Problem 12:
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
# 	 1: 1
# 	 3: 1,3
# 	 6: 1,2,3,6
# 	10: 1,2,5,10
# 	15: 1,3,5,15
# 	21: 1,3,7,21
# 	28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred
# divisors?
#

# This is the number of divisors we need.
$divisors = 500;

# This is the current triangle number we are working on.
$n = $divisors;

# Iterate over triangle numbers until we find the right one.
while (true) {
	# Determine the triangle number.
	$triangle_num = ($n + 1) * $n / 2;

	# Determine how far we should go when checking divisors.
	$top = int(sqrt($triangle_num));

	# This will keep track of the number of divisors.
	$div_count = 2;

	# Iterate over all the potential divisors.
	for $d (2 .. $top) {
		# Increase the divisor count if d is a divisor.
		if ($triangle_num % $d == 0) {
			if ($top == $d) {
				# Add one if we found the square root.
				$div_count++
			} else {
				# Add two otherwise (divisor and quotient).
				$div_count += 2;
			}
		}
	}

	# Break out if we hit the limit.
	last if $div_count >= $divisors;

	# Move to the next one.
	$n++;
}

# Print the message.
print "Found: $triangle_num\n";

