
#
# Problem 44:
#
# Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten
# pentagonal numbers are:
# 
#                   1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# 
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
# 70 - 22 = 48, is not pentagonal.
# 
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
# difference is pentagonal and D = |Pk - Pj| is minimised; what is the value of
# D?
#

# This is the maximum n we will go.
$max_n = 2200;

# This will hold the pentagonal numbers identified.
%pnums = ( );

# This defines the highest pentagonal number found so far.
$max_pnum = 0;

# This defines n for the highest pentagonal number found so far.
$max_pnum_n = 0;

# Iterate through the possible n values for Pj.
for $pjn (1 .. $max_n-1) {
	# Identify Pj value.
	$pj = $pjn * (3 * $pjn - 1) / 2;

	# Add this pentagonal number to the hash if necessary.
	$pnums{$pj} = 1 and $max_pnum = $pj and $max_pnum_n = $pjn
		if ($pj > $max_pnum);

	# Iterate through the possible n values for Pk.
	for $pkn ($pjn .. $max_n) {
		# Identify Pk value.
		$pk = $pkn * (3 * $pkn - 1) / 2;

		# Add this pentagonal number to the hash if necessary.
		$pnums{$pk} = 1 and $max_pnum = $pk and $max_pnum_n = $pkn
			if ($pk > $max_pnum);

		# Continue on if the difference is not pentagonal.
		next if ($pnums{$pk - $pj} eq undef);

		# Make sure pentagonal values have been identified up to the sum.
		while ($max_pnum < $pk + $pj) {
			# Increment the maximum n value for pentagonal numbers.
			$max_pnum_n++;

			# Find the next pentagonal number.
			$max_pnum = $max_pnum_n * (3 * $max_pnum_n - 1) / 2;

			# Add it to the hash.
			$pnums{$max_pnum} = 1;
		}

		# Print a message if we found one.
		print "Found " . ($pk - $pj) . "\n" if ($pnums{$pk + $pj} ne undef);
	}
}

